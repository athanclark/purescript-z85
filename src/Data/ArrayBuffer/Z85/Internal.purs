module Data.ArrayBuffer.Z85.Internal where

import Prelude
import Data.Maybe (Maybe (..))
import Data.Array (unsafeIndex) as Array
import Data.Char (toCharCode)
import Data.String.CodeUnits (charAt)
import Partial.Unsafe (unsafePartial)


-- | Represents a single base85 digit between `0` and `84`
type Base85 = Int

-- | Represents a single base256 digit between `0x00` and `0xFF`
type Base256 = Int

-- | Character included in the z85 character set: `0-9`, `a-z`, `A-Z`, and `:+=^!/*?&<>()[]{}@%$#`
type Z85Char = Char


-- | Sorted by their value in the z85 encoding
z85Chars :: String
z85Chars = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.-:+=^!/*?&<>()[]{}@%$#"


lookupz85Char :: Base85 -> Z85Char
lookupz85Char idx = unsafePartial $ case charAt idx z85Chars of
  Just c -> c


-- | Reverse-sorted by the lookup index obtained by getting the UTF-16 char code value, minus 32 -
-- | the equivalent of `"n".charCodeAt(0) - 32` in JavaScript, where `n` is some x85 character.
charCodeToBase256 :: Array Base256
charCodeToBase256 =
  [ 0x00, 0x44, 0x00, 0x54, 0x53, 0x52, 0x48, 0x00
  , 0x4B, 0x4C, 0x46, 0x41, 0x00, 0x3F, 0x3E, 0x45
  , 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07
  , 0x08, 0x09, 0x40, 0x00, 0x49, 0x42, 0x4A, 0x47
  , 0x51, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A
  , 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32
  , 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A
  , 0x3B, 0x3C, 0x3D, 0x4D, 0x00, 0x4E, 0x43, 0x00
  , 0x00, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10
  , 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18
  , 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20
  , 0x21, 0x22, 0x23, 0x4F, 0x00, 0x50, 0x00, 0x00
  ]


lookupBase256 :: Z85Char -> Maybe Base256
lookupBase256 c = Array.index charCodeToBase256 (toCharCode c - 32)
